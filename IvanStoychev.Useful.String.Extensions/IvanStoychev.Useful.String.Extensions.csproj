<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <Authors>Ivan Stoychev</Authors>
    <Title>Ivan Stoychev's Useful String Extensions</Title>
    <Language>English</Language>
    <Description>A .Net Core library of useful extension methods for the "string" class in C#.</Description>
    <Summary>A .Net Core class library collection of useful extension methods for the "string" class in C#.</Summary>
    <PackageProjectUrl>https://github.com/IvanStoychev/IvanStoychev.Useful.String.Extensions/wiki</PackageProjectUrl>
    <RepositoryUrl>https://github.com/IvanStoychev/IvanStoychev.Useful.String.Extensions</RepositoryUrl>
    <PackageTags>c#, useful, string, extension, efficient</PackageTags>
    <RepositoryType>git</RepositoryType>
    <PackageIcon>Nuget Icon.png</PackageIcon>
    <Copyright>Copyright (c) 2022 Ivan Stoychev. All rights reserved.</Copyright>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <NeutralLanguage>en</NeutralLanguage>
    <PackageReleaseNotes>+ Updated to .Net 6.
		+ Updated NuGet Icon.
		+ Added NuGet README.
		+ Improved all method validation and thrown exception messages. Now any problems will be caught better and any exceptions caused will contain more useful information.
		+ Embedded debug symbols, so that the library source code can be stepped through during debugging.

		= Improved some summaries.
		= Fixed `KeepOnlySpecialCharacters()` method only keeping a single instance of each special character.
		= Consolidated the `Replace(IEnumerable&lt;string&gt; oldStrings, string newString)` and `Replace(IEnumerable&lt;string&gt; oldStrings, string newString, bool ignoreCase)` methods into `Replace(string newString, IEnumerable&lt;string&gt; oldStrings, StringComparison stringComparison = StringComparison.CurrentCulture)`. This allows more string comparison flexibility and features improved validation of arguments and information in thrown exceptions.
		= Consolidated the `Replace(IEnumerable&lt;string&gt; oldStrings, string newString)` and `Replace(IEnumerable&lt;string&gt; oldStrings, string newString, bool ignoreCase)` methods into `Replace(string newString, IEnumerable&lt;string&gt; oldStrings, StringComparison stringComparison = StringComparison.CurrentCulture)`. This allows more string comparison flexibility.
		= Consolidated the `Remove(IEnumerable&lt;string&gt; removeStrings)` and `Remove(bool ignoreCase, IEnumerable&lt;string&gt; removeStrings)` methods into `Remove(IEnumerable&lt;string&gt; removeStrings, StringComparison stringComparison = StringComparison.CurrentCulture)`.
		= Changed signature of method `Replace(bool ignoreCase, string newString, params string[] oldStrings)` to `Replace(string newString, bool ignoreCase = false, params string[] oldStrings)`.
		= Added additional information in ArgumentNullExceptions about the name of the method the exception occurred in.
		Before the message would be akin to "The argument given for 'keychars' was null.", now the message will be akin to "The argument given for parameter "keychars" of method "Contains" was null.".
		This was done to give more details to developers trying to debug the source of such an exception, as many different methods can have parameters with the same name.
		= Changed parameter "culture" of methods `TrimStart(string trimString, bool ignoreCase, CultureInfo culture)` and `TrimEnd(string trimString, bool ignoreCase, CultureInfo culture)` to be nullable. The signatures are now `TrimStart(string trimString, bool ignoreCase, CultureInfo? culture)` and `TrimEnd(string trimString, bool ignoreCase, CultureInfo? culture)`.

		- Removed methods `Replace(string newString, params string[] oldStrings)`, `Replace(bool ignoreCase, string newString, params string[] oldStrings)`, `Contains(params string[] keywords)`, `Contains(StringComparison comparison, params string[] keywords)`, `Contains(params char[] keychars)`, `Contains(StringComparison comparison, params char[] keychars)`, `Remove(params string[] removeStrings)` and `Remove(bool ignoreCase, params string[] removeStrings)` as they could be, legally, called with no argument for the `params` parameter, which would either do nothing or throw an exception. This is a very confusing and unpleasant behaviour, even when fully documented. It was decided that the convenience of, potentially, saving the user from passing these arguments as an `IEnumerable` is not worth the hassle.
		- Removed methods `Trim(int amount)`, `TrimStart(int amount)` and `TrimEnd(int amount)` as the same functionality can be easily achieved with [indices and ranges](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/ranges-indexes) or the "Substring" method.
		- Removed method `TrimStart(string trimString)` and added default value for parameter `stringComparison` of method `TrimStart(string trimString, StringComparison stringComparison)`.


		Legend:
		+ New feature
		- Removed feature
		= Altered existing feature
	</PackageReleaseNotes>
    <Version>2.0.0</Version>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <FileVersion>2.0.0.0</FileVersion>
    <PackageIconUrl />
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>IvanStoychev.Useful.String.Extensions</PackageId>
    <Product>IvanStoychev.Useful.String.Extensions</Product>
    <AssemblyName>IvanStoychev.Useful.String.Extensions</AssemblyName>
    <RootNamespace>IvanStoychev.Useful.String.Extensions</RootNamespace>
    <PackageReadmeFile>Nuget Readme.md</PackageReadmeFile>
    <DebugType>embedded</DebugType>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <Nullable>disable</Nullable>
    <SignAssembly>False</SignAssembly>
    <ErrorReport>queue</ErrorReport>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>C:\Users\VimesRegicide\Source\Repos\IvanStoychev.Useful.String.Extensions\IvanStoychev.Useful.String.Extensions\bin\Release\net5.0\IvanStoychev.Useful.String.Extensions.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile></DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\.editorconfig" Link=".editorconfig" />
    <None Include="..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\Nuget Icon.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\Nuget Readme.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

</Project>
